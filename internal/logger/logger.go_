package logger

import (
	"context"
	"go-infra/internal/config"

	"time"

	"go.uber.org/zap"
	"gopkg.in/natefinch/lumberjack.v2"

	gormLogger "gorm.io/gorm/logger"
)

// Config represents the setting for zap logger.
type Config struct {
	ZapConfig zap.Config        `json:"zap_config" yaml:"zap_config"`
	LogRotate lumberjack.Logger `json:"log_rotate" yaml:"log_rotate"`
}

// AppLogger is an alternative implementation of *gorm.AppLogger
type AppLogger interface {
	ZapLogger() *zap.SugaredLogger
	LogMode(level gormLogger.LogLevel) gormLogger.Interface
	Info(ctx context.Context, msg string, data ...interface{})
	Warn(ctx context.Context, msg string, data ...interface{})
	Error(ctx context.Context, msg string, data ...interface{})
	Trace(ctx context.Context, begin time.Time, fc func() (string, int64), err error)
}

type logger struct {
	Zap *zap.SugaredLogger
}

// NewLogger is constructor for logger
func NewLogger(sugar *zap.SugaredLogger) AppLogger {
	return &logger{Zap: sugar}
}

// InitLogger create logger object for *gorm.DB from *echo.Logger
func InitLogger(config *config.AppConfig) AppLogger {

	var zapLogger *zap.Logger

	if config.Debug {
		zapLogger, _ = zap.NewDevelopment()

	} else {
		zapLogger, _ = zap.NewProduction()
	}

	zapSugar := zapLogger.Sugar()
	// set package varriable logger.
	appLogger := NewLogger(zapSugar)
	// appLogger.ZapLogger().Infof("Success to read zap logger configuration: config.default.yml")
	appLogger.ZapLogger()

	_ = zapLogger.Sync()
	return appLogger
}

// ZapLogger returns zapSugaredLogger
func (log *logger) ZapLogger() *zap.SugaredLogger {
	return log.Zap
}
